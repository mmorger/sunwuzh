<?php

/**
 * @file
 * flickity.module
 */

use Drupal\flickity\Entity\FlickityGroup;

/**
 * Implements hook_theme().
 */
function flickity_theme() {
  return array(
    'flickity' => array(
      'function' => 'theme_flickity',
      'variables' => array('items' => array(), 'settings' => array()),
      'file' => 'theme/flickity.theme.inc',
    ),
    'flickity_item' => array(
      'variables' => array('item' => array(), 'attributes' => array())
    ),
    'flickity_wrapper' => array(
      'variables' => array('output' => array(), 'attributes' => array())
    )
  );
}

/**
 * Returns Flickity settings group to initialize.
 *
 * @todo offer breakpoints as child setting groups.
 *
 * @param $id
 */
function flickity_settings($id) {
  $config = flickity_load($id);
  $settings = $config->getSettings();

  $group = array(
    'id' => $config->id(),
    'label' => $config->label(),
    'settings' => array(
      'imagesLoaded' => $settings['images_loaded'],
      'cellSelector' => $settings['cell_selector'],
      'initialIndex' => $settings['initial_index'],
      'accessibility' => (boolean)$settings['accessibility'],
      'setGallerySize' => (boolean)$settings['set_gallery_size'],
      'resize' => (boolean)$settings['resize'],
      'cellAlign' => $settings['cell_align'],
      'contain' => (boolean)$settings['contain'],
      'percentPosition' => (boolean)$settings['percent_position'],
      'rightToLeft' => (boolean)$settings['right_to_left'],
      'draggable' => (boolean)$settings['draggable'],
      'freeScroll' => (boolean)$settings['free_scroll'],
      'wrapAround' => (boolean)$settings['wrap_around'],
      'groupCells' => $settings['group_cells'],
      'adaptiveHeight' => $settings['adaptive_height'],
      'lazyLoad' => $settings['lazy_load'],
      'dragThreshold' => $settings['drag_threshold'],
      'autoPlay' => $settings['auto_play'],
      'watchCSS' => (boolean)$settings['watch_css'],
      'asNavFor' => $settings['as_nav_for'],
      'selectedAttraction' => $settings['selected_attraction'],
      'friction' => $settings['friction'],
      'freeScrollFriction' => $settings['free_scroll_friction'],
      'preNextButtons' => (boolean)$settings['prev_next_buttons'],
      'pageDots' => (boolean)$settings['page_dots']
    )
  );

  // Allow alter on group settings.
  \Drupal::moduleHandler()->alter('settings', $group);

  return $group;
}

/**
 * Returns Flickity settings group by id.
 *
 * @param $id
 * @return \Drupal\Core\Entity\EntityInterface|static
 */
function flickity_load($id) {
  return FlickityGroup::load($id);
}

/**
 * Returns multiple Flickity settings groups.
 *
 * @return \Drupal\Core\Entity\EntityInterface|static
 */
function flickity_load_multiple($ids = NULL) {
  return FlickityGroup::loadMultiple($ids);
}

/**
 * Returns a list of all available settings groups.
 */
function flickity_settings_list() {
  $options = array();

  foreach (flickity_load_multiple() as $group) {
    $options[$group->id()] = $group->label();
  }

  return $options;
}

/**
 * Implements hook_form_alter().
 */
function flickity_form_flickity_group_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if ($form['id']['#default_value'] == 'default_group') {
    hide($form['actions']['delete']);
  }
}
